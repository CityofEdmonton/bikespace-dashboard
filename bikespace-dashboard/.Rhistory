library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
runApp()
library("shiny")
library("shinydashboard")
library("RCurl")
library("jsonlite")
library("igraph")
library("highcharter")
library("rvest")
library("purrr")
library("tidyr")
library("dplyr")
library("stringr")
library("leaflet")
library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
##-- Retrieve and clean data --##
# Data from API
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
# Extract date and time from datetime variable
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
# Format date and time variables
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
# Drop dashboard.time variables
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
# Clean problem_type field so that lists (multiple problem types) in the field are
# strings
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
# Capitalize each problem type in field using function
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
survey_data$problem_type_collapse <- sapply(survey_data$problem_type_collapse, maketitle)
View(survey_data)
unlist(survey_data$dashboard.problem)
?gsub
survey_data$problem_type_collapse <- gsub("Badly", "Abandoned", survey_data$problem_type_collapse)
?HTML
??HTML
shiny::runApp()
?tagList
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(survey_data)
shiny::runApp()
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
View(survey_data)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
View(survey_data)
unique(survey_data$dashboard.duration)
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
unique(survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
unique(survey_data$dashboard.duration)
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
View(survey_data)
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
View(survey_data)
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=9)
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
length(unlist(survey_data$dashboard.duration))
View(survey_data)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
View(survey_data)
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
unique(survey_data$dashboard.duration)
View(survey_data)
runApp()
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=7)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
View(survey_data)
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=7)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
# Extract date and time from datetime variable
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
# Format date and time variables
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
# Drop dashboard.time variables
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
View(survey_data)
View(survey_data)
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
View(survey_data)
survey_data$problem_type_collapse <- gsub(",", ";", survey_data$problem_type_collapse)
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
survey_data$problem_type_collapse <- sapply(survey_data$problem_type_collapse, maketitle)
runApp()
library("shiny")
library("shinydashboard")
library("RCurl")
library("jsonlite")
library("igraph")
library("highcharter")
library("rvest")
library("purrr")
library("tidyr")
library("dplyr")
library("stringr")
library("leaflet")
library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
##-- Retrieve and clean data --##
# Data from API
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=7)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
# Extract date and time from datetime variable
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
# Format date and time variables
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
# Drop dashboard.time variables
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
# Clean problem_type field so that lists (multiple problem types) in the field are
# strings
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
# Also replace commas with semi-colons for CSV export
survey_data$problem_type_collapse <- gsub(",", ";", survey_data$problem_type_collapse)
# Capitalize each problem type in field using function
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
survey_data$problem_type_collapse <- sapply(survey_data$problem_type_collapse, maketitle)
# Replace 'Badly' with 'Abandonded'
survey_data$problem_type_collapse <- gsub("Badly", "Abandoned", survey_data$problem_type_collapse)
View(survey_data)
class(survey_data$problem_type_collapse)
?split
unique(survey_data$problem_type_collapse)
?strsplit
strsplit(survey_data$problem_type_collapse, "[;")
strsplit(survey_data$problem_type_collapse, "[;]")
survey_data <- survey_data[!is.na(survey_data$problem_type_collapse),]
survey_data <- survey_data[!grepl("NA", survey_data$problem_type_collapse),]
survey_data$weekday <- weekdays(survey_data$date, abbreviate = TRUE)
survey_data$hour <- as.numeric(format(survey_data$time, format="%H"))
survey_data$time_group <- ifelse(survey_data$hour %in% c(7,8,9), "07-10",
ifelse(survey_data$hour %in% c(10,11,12), "10-13",
ifelse(survey_data$hour %in% c(13,14,15), "13-16",
ifelse(survey_data$hour %in% c(16,17,18), "16-19",
ifelse(is.na(survey_data$hour), NA,"19-07")))))
# Rename variables
colnames(survey_data) <- c("id","problem_type", "problem_lat","problem_long","intersection",
"comment","duration","pic","date", "time","problem_type_collapse",
"weekday", "hour", "time_group")
# Drop report time variable
survey_data <- survey_data[, !(colnames(survey_data) %in% c("time"))]
View(survey_data)
unique(str_trim(strsplit(survey_data$problem_type_collapse, "[;]")))
class(strsplit(survey_data$problem_type_collapse, "[;]"))
unlist(strsplit(survey_data$problem_type_collapse, "[;]"))
str_trim(unlist(strsplit(survey_data$problem_type_collapse, "[;]")))
unique(str_trim(unlist(strsplit(survey_data$problem_type_collapse, "[;]"))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("shinydashboard")
library("RCurl")
library("jsonlite")
library("igraph")
library("highcharter")
library("rvest")
library("purrr")
library("tidyr")
library("dplyr")
library("stringr")
library("leaflet")
library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
##-- Retrieve and clean data --##
# Data from API
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=7)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
# Extract date and time from datetime variable
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
# Format date and time variables
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
# Drop dashboard.time variables
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
# Clean problem_type field so that lists (multiple problem types) in the field are
# strings
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
# Also replace commas with semi-colons for CSV export
survey_data$problem_type_collapse <- gsub(",", ";", survey_data$problem_type_collapse)
# Capitalize each problem type in field using function
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
survey_data$problem_type_collapse <- sapply(survey_data$problem_type_collapse, maketitle)
# Replace 'Badly' with 'Abandonded'
survey_data$problem_type_collapse <- gsub("Badly", "Abandoned", survey_data$problem_type_collapse)
# Drop NA (n=1)
survey_data <- survey_data[!grepl("NA", survey_data$problem_type_collapse),]
# Create date, weekday and hour variables
survey_data$weekday <- weekdays(survey_data$date, abbreviate = TRUE)
survey_data$hour <- as.numeric(format(survey_data$time, format="%H"))
survey_data$time_group <- ifelse(survey_data$hour %in% c(7,8,9), "07-10",
ifelse(survey_data$hour %in% c(10,11,12), "10-13",
ifelse(survey_data$hour %in% c(13,14,15), "13-16",
ifelse(survey_data$hour %in% c(16,17,18), "16-19",
ifelse(is.na(survey_data$hour), NA,"19-07")))))
# Rename variables
colnames(survey_data) <- c("id","problem_type", "problem_lat","problem_long","intersection",
"comment","duration","pic","date", "time","problem_type_collapse",
"weekday", "hour", "time_group")
# Drop report time variable
survey_data <- survey_data[, !(colnames(survey_data) %in% c("time"))]
View(survey_data)
runApp()
library("shiny")
library("shinydashboard")
library("RCurl")
library("jsonlite")
library("igraph")
library("highcharter")
library("rvest")
library("purrr")
library("tidyr")
library("dplyr")
library("stringr")
library("leaflet")
library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
##-- Retrieve and clean data --##
# Data from API
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
# TEMPORARY SOLUTION FOR DURATION, CHANGE WHEN UX SET
# Issue is that there are multiple values for duration, should be mutually exclusive
# Exclude entries with multiple duration values (n=7)
survey_data$dashboard.duration <- unlist(survey_data$dashboard.duration)[1:nrow(survey_data)]
survey_data <-survey_data[!grepl(",", survey_data$dashboard.duration), ]
# Also old duration categories in the data
survey_data$dashboard.duration <- if_else(grepl("hour", survey_data$dashboard.duration), "hours", survey_data$dashboard.duration)
survey_data$dashboard.duration <- capitalize(survey_data$dashboard.duration)
# Extract date and time from datetime variable
survey_data$date <- substr(survey_data$dashboard.time,1,10)
survey_data$time <- substr(survey_data$dashboard.time,12,19)
# Format date and time variables
survey_data$date <- as.Date(strptime(survey_data$date, "%Y-%m-%d"))
survey_data$time <- strptime(survey_data$time, "%H:%M:%S")
# Drop dashboard.time variables
survey_data <- survey_data[, !(colnames(survey_data) %in% c("dashboard.time"))]
# Clean problem_type field so that lists (multiple problem types) in the field are
# strings
survey_data$problem_type_collapse <- sapply(survey_data$dashboard.problem, paste, collapse="; ")
# Also replace commas with semi-colons for CSV export
survey_data$problem_type_collapse <- gsub(",", ";", survey_data$problem_type_collapse)
# Capitalize each problem type in field using function
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
survey_data$problem_type_collapse <- sapply(survey_data$problem_type_collapse, maketitle)
# Replace 'Badly' with 'Abandonded'
survey_data$problem_type_collapse <- gsub("Badly", "Abandoned", survey_data$problem_type_collapse)
# Drop NA (n=1)
survey_data <- survey_data[!grepl("NA", survey_data$problem_type_collapse),]
# Create date, weekday and hour variables
survey_data$weekday <- weekdays(survey_data$date, abbreviate = TRUE)
survey_data$hour <- as.numeric(format(survey_data$time, format="%H"))
survey_data$time_group <- ifelse(survey_data$hour %in% c(7,8,9), "07-10",
ifelse(survey_data$hour %in% c(10,11,12), "10-13",
ifelse(survey_data$hour %in% c(13,14,15), "13-16",
ifelse(survey_data$hour %in% c(16,17,18), "16-19",
ifelse(is.na(survey_data$hour), NA,"19-07")))))
# Rename variables
colnames(survey_data) <- c("id","problem_type", "problem_lat","problem_long","intersection",
"comment","duration","pic","date", "time","problem_type_collapse",
"weekday", "hour", "time_group")
# Drop report time variable
survey_data <- survey_data[, !(colnames(survey_data) %in% c("time"))]
View(survey_data)
View(survey_data)
runApp()
pop_img_base <- "https://s3.amazonaws.com/bikeparking/"
paste(pop_img_base, survey_data$pic)
paste(pop_img_base, survey_data$pic, sep="")
runApp()
survey_data[,"pic"]
runApp()
runApp()
df_test <- survey_data %>%
mutate(pic = paste(pop_img_base, pic, sep=""))
View(df_test)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("shinydashboard")
library("RCurl")
library("jsonlite")
library("igraph")
library("highcharter")
library("rvest")
library("purrr")
library("tidyr")
library("dplyr")
library("stringr")
library("leaflet")
library("htmltools")
library("stringr")
library("RColorBrewer")
library("rmarkdown")
library("webshot")
library("shinyBS")
library("shinyjs")
library("shinyWidgets")
library("ggplot2")
library("Hmisc")
library("httr")
##-- Retrieve and clean data --##
# Data from API
url <- "https://s3.amazonaws.com/bikespace-dashboard-assets/dashboard.json"
doc <- getURL(url)
api_data <- as.data.frame(fromJSON(doc, flatten = TRUE))
survey_data <- api_data[, c("dashboard.id","dashboard.problem","dashboard.latitude","dashboard.longitude",
"dashboard.intersection","dashboard.comments","dashboard.duration", "dashboard.time",
"dashboard.pic")]
View(survey_data)
unique(survey_data$dashboard.comments)
View(api_data)
unique(api_data$dashboard.comments)
View(survey_data)
runApp()
View(survey_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
